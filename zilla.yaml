name: gRPC-example
bindings:
  # Proxy service entrypoint
  north_tcp_server:
    type: tcp
    kind: server
    options:
      host: 0.0.0.0
      port: 7151
    exit: north_http_server

  north_http_server:
    type: http
    kind: server
    options:
      versions:
        - h2
      access-control:
        policy: cross-origin
    exit: north_grpc_server

  # gRPC service definition
  north_grpc_server:
    type: grpc
    kind: server
    options:
      services:
        - proto/echo.proto
    routes:
      - when:
          - method: aisstream.AISService/*
        exit: north_grpc_kafka_mapping

  # Proxy a gRPC service to a Kafka topic
  north_grpc_kafka_mapping:
    type: grpc-kafka
    kind: proxy
    routes:
      - when:
          - method: aisstream.AISService/*
        exit: north_kafka_cache_client
        with:
          capability: produce
          topic: echo-messages
          acks: leader_only
          reply-to: echo-messages

  north_kafka_cache_client:
    type: kafka
    kind: cache_client
    exit: south_kafka_cache_server

  south_kafka_cache_server:
    type: kafka
    kind: cache_server
    options:
      bootstrap:
        - echo-messages
    exit: south_kafka_client

  # Connect to Kafka
  south_kafka_client:
    type: kafka
    kind: client
    options:
      servers:
        - ${{env.KAFKA_BOOTSTRAP_SERVER}}
    exit: south_kafka_tcp_client

  south_kafka_tcp_client:
    type: tcp
    kind: client
    options:
      host: 0.0.0.0
      port: 7151

  # remote_server:
  #   type: kafka-grpc
  #   kind: remote_server
  #   options:
  #     acks: leader_only
  #   routes:
  #     - when:
  #         - topic: echo-messages
  #           reply-to: echo-messages
  #       exit: grpc_client
  #       with:
  #         scheme: http

  # grpc_client:
  #   type: grpc
  #   kind: client
  #   options:
  #     services:
  #       - route_guide.proto
  #   routes:
  #     - when:
  #         - method: routeguide.RouteGuide/GetFeature
  #       exit: http_client

  # http_client:
  #   type: http
  #   kind: client
  #   options:
  #     versions:
  #       - h2
  #   exit: tcp_client

  # tcp_client:
  #   type: tcp
  #   kind: client
  #   options:
  #     host: 0.0.0.0
  #     port: 6969

telemetry:
  exporters:
    stdout_logs_exporter:
      type: stdout
